From 22d13dc35da5c0dcb87f92cc8e3c8851ea3fa771 Mon Sep 17 00:00:00 2001
From: Stephen Cprek <smcprek@us.ibm.com>
Date: Thu, 29 Sep 2016 16:40:46 -0500
Subject: [PATCH] Support for SBKT

---
 create_pnor_image.pl                |  1 +
 defaultPnorLayoutWithGoldenSide.xml | 10 ++++++-
 update_image.pl                     | 55 ++++++++++++++++++++++++-------------
 3 files changed, 46 insertions(+), 20 deletions(-)

diff --git a/create_pnor_image.pl b/create_pnor_image.pl
index 82449b3..51e0d18 100755
--- a/create_pnor_image.pl
+++ b/create_pnor_image.pl
@@ -123,6 +123,7 @@ $build_pnor_command .= " --binFile_FIRDATA $scratch_dir/firdata.bin.ecc";
 $build_pnor_command .= " --binFile_CAPP $scratch_dir/cappucode.bin.ecc";
 $build_pnor_command .= " --binFile_SECBOOT $scratch_dir/secboot.bin.ecc";
 $build_pnor_command .= " --binFile_VERSION $openpower_version_filename";
+$build_pnor_command .= " --binFile_SBKT $scratch_dir/SBKT.bin";
 $build_pnor_command .= " --fpartCmd \"fpart\"";
 $build_pnor_command .= " --fcpCmd \"fcp\"";
 print "###############################";
diff --git a/defaultPnorLayoutWithGoldenSide.xml b/defaultPnorLayoutWithGoldenSide.xml
index f8cb1d8..bb738d7 100755
--- a/defaultPnorLayoutWithGoldenSide.xml
+++ b/defaultPnorLayoutWithGoldenSide.xml
@@ -55,7 +55,7 @@ Layout Description
     <sha512perEC/>  -> Indicates SHA512 is used to indicate version for each
                        EC-specific image within the Partition.
     <preserved/>    -> Indicates Partition is preserved across code updates.
-    <reprovision/>  -> Indicates Partition should be erased during a system 
+    <reprovision/>  -> Indicates Partition should be erased during a system
                        reprovision.
 </section>
 -->
@@ -270,6 +270,14 @@ Layout Description
         <preserved/>
     </section>
     <section>
+        <description>SecureBoot Key Transition Partition (12K)</description>
+        <eyeCatch>SBKT</eyeCatch>
+        <physicalOffset>0x1EC6000</physicalOffset>
+        <physicalRegionSize>0x4000</physicalRegionSize>
+        <side>sideless</side>
+        <ecc/>
+    </section>
+    <section>
         <description>Hostboot Base (576K)</description>
         <!--NOTE: MUST update standalone.simics if offset changes -->
         <!--NOTE: HBB Address must be at pnorSize - 0x99000 for a new
diff --git a/update_image.pl b/update_image.pl
index 7e1f77a..23e9edb 100755
--- a/update_image.pl
+++ b/update_image.pl
@@ -21,6 +21,7 @@ my $payload = "";
 my $payload_filename = "";
 my $xz_compression = 0;
 my $secureboot = 0;
+my $key_transition = 0;
 my $pnor_layout = "";
 my $debug = 0;
 
@@ -94,6 +95,9 @@ while (@ARGV > 0){
     elsif (/^-secureboot/i){
         $secureboot = 1;
     }
+    elsif (/^-key_transition/i){
+        $key_transition = 1;
+    }
     elsif (/^-pnor_layout/i){
         $pnor_layout = $ARGV[1] or die "Bad command line arg given: expecting a filepath to PNOR layout file.\n";
         shift;
@@ -122,6 +126,7 @@ if ($payload ne "")
 
 sub processConvergedSections {
 
+    use constant EMPTY => "EMPTY";
     # Source and destination file for each supported section
     my %sections=();
     $sections{HBB}{in}   = "$hb_image_dir/img/hostboot.bin";
@@ -136,6 +141,7 @@ sub processConvergedSections {
     $sections{SBEC}{out} = "$scratch_dir/$sbec_binary_filename";
     $sections{PAYLOAD}{in}  = "$payload.bin";
     $sections{PAYLOAD}{out} = "$scratch_dir/$payload_filename";
+    $sections{SBKT}{out} = "$scratch_dir/SBKT.bin";
 
     # Build up the system bin files specification
     my $system_bin_files;
@@ -148,28 +154,36 @@ sub processConvergedSections {
                 . "or ECC, neither of which is allowed.";
         }
 
-        # Stage the input file
-        run_command("cp $sections{$section}{in} "
-            . "$scratch_dir/$section.staged");
-
-        # If secureboot compile, there can be extra protected
-        # and unprotected versions of the input to stage
-        if(-e "$sections{$section}{in}.protected")
+        my $separator = length($system_bin_files) ? "," : "";
+        # If no input bin file then the pnor script handles creating the content
+        if(!exists $sections{$section}{in})
         {
-            run_command("cp $sections{$section}{in}.protected "
-                . "$scratch_dir/$section.staged.protected");
+             # Build up the systemBinFiles argument
+             $system_bin_files .= "$separator$section=".EMPTY;
         }
-
-        if(-e "$sections{$section}{in}.unprotected")
+        else
         {
-            run_command("cp $sections{$section}{in}.unprotected "
-                . "$scratch_dir/$section.staged.unprotected");
+            # Stage the input file
+            run_command("cp $sections{$section}{in} "
+             . "$scratch_dir/$section.staged");
+
+            # If secureboot compile, there can be extra protected
+            # and unprotected versions of the input to stage
+            if(-e "$sections{$section}{in}.protected")
+            {
+                run_command("cp $sections{$section}{in}.protected "
+                    . "$scratch_dir/$section.staged.protected");
+            }
+
+            if(-e "$sections{$section}{in}.unprotected")
+            {
+                run_command("cp $sections{$section}{in}.unprotected "
+                    . "$scratch_dir/$section.staged.unprotected");
+            }
+            # Build up the systemBinFiles argument
+            $system_bin_files .= "$separator$section=$scratch_dir/"
+                . "$section.staged";
         }
-
-        # Build up the systemBinFiles argument
-        my $separator = length($system_bin_files) ? "," : "";
-        $system_bin_files .= "$separator$section=$scratch_dir/"
-            . "$section.staged";
     }
 
     if(length($system_bin_files))
@@ -185,6 +199,8 @@ sub processConvergedSections {
 
         # Determine whether to securely sign the images
         my $securebootArg = $secureboot ? "--secureboot" : "";
+        # Determine whether a key transition should take place 
+        my $keyTransitionArg = $key_transition ? "--key-transition" : "";
 
         # Process each image
         my $cmd =   "cd $scratch_dir && "
@@ -192,7 +208,7 @@ sub processConvergedSections {
                       . "--binDir $scratch_dir "
                       . "--systemBinFiles $system_bin_files "
                       . "--pnorLayout $pnor_layout "
-                      . "$securebootArg ";
+                      . "$securebootArg $keyTransitionArg";
 
         # Print context not visible in the actual command
         if($debug)
@@ -208,6 +224,7 @@ sub processConvergedSections {
         # Copy each output file to its final destination
         foreach my $section (keys %sections)
         {
+            next if(!exists $sections{$section}{in});
             run_command("cp $scratch_dir/$section.bin "
                 . "$sections{$section}{out}");
         }
-- 
1.8.2.2

