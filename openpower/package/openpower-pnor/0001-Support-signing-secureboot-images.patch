From c5dda2d3fd6c1eac971d092a06ef1e7729cb14eb Mon Sep 17 00:00:00 2001
From: Nick Bofferding <bofferdn@us.ibm.com>
Date: Wed, 7 Sep 2016 16:39:39 -0500
Subject: [PATCH] Support signing secureboot images

- Support signing secureboot images for HBB,HBI,HBD,SBE,SBEC,PAYLOAD sections
- Support tranditional image prep when not being signed
- Requires SBE and SBEC to be non-padded and non-ECC'd on input
---
 update_image.pl | 152 ++++++++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 121 insertions(+), 31 deletions(-)

diff --git a/update_image.pl b/update_image.pl
index 313958c..7e1f77a 100755
--- a/update_image.pl
+++ b/update_image.pl
@@ -18,7 +18,11 @@ my $occ_binary_filename = "";
 my $capp_binary_filename = "";
 my $openpower_version_filename = "";
 my $payload = "";
+my $payload_filename = "";
 my $xz_compression = 0;
+my $secureboot = 0;
+my $pnor_layout = "";
+my $debug = 0;
 
 while (@ARGV > 0){
     $_ = $ARGV[0];
@@ -76,13 +80,24 @@ while (@ARGV > 0){
         $openpower_version_filename = $ARGV[1] or die "Bad command line arg given: expecting a config type.\n";
         shift;
     }
-    elsif (/^-payload/i){
+    elsif (/^-payload$/i){
         $payload = $ARGV[1] or die "Bad command line arg given: expecting a filepath to payload binary file.\n";
         shift;
     }
+    elsif (/^-payload_filename/i){
+        $payload_filename = $ARGV[1] or die "Bad command line arg given: expecting a filepath to payload binary file.\n";
+        shift;
+    }
     elsif (/^-xz_compression/i){
         $xz_compression = 1;
     }
+    elsif (/^-secureboot/i){
+        $secureboot = 1;
+    }
+    elsif (/^-pnor_layout/i){
+        $pnor_layout = $ARGV[1] or die "Bad command line arg given: expecting a filepath to PNOR layout file.\n";
+        shift;
+    }
     else {
         print "Unrecognized command line arg: $_ \n";
         #print "To view all the options and help text run \'$program_name -h\' \n";
@@ -92,30 +107,114 @@ while (@ARGV > 0){
 }
 
 # Compress the skiboot lid image with lzma
-if (($payload ne "") and ($xz_compression))
+if ($payload ne "")
 {
-    run_command("xz -fk --check=crc32 $payload");
+    if($xz_compression)
+    {
+        run_command("xz -fk --stdout --check=crc32 $payload > "
+            . "$payload.bin");
+    }
+    else
+    {
+        run_command("cp $payload $payload.bin");
+    }
+}
+
+sub processConvergedSections {
+
+    # Source and destination file for each supported section
+    my %sections=();
+    $sections{HBB}{in}   = "$hb_image_dir/img/hostboot.bin";
+    $sections{HBB}{out}  = "$scratch_dir/hostboot.header.bin.ecc";
+    $sections{HBI}{in}   = "$hb_image_dir/img/hostboot_extended.bin";
+    $sections{HBI}{out}  = "$scratch_dir/hostboot_extended.header.bin.ecc";
+    $sections{HBD}{in}   = "$op_target_dir/$targeting_binary_source";
+    $sections{HBD}{out}  = "$scratch_dir/$targeting_binary_filename";
+    $sections{SBE}{in}   = "$hb_binary_dir/$sbe_binary_filename";
+    $sections{SBE}{out}  = "$scratch_dir/$sbe_binary_filename";
+    $sections{SBEC}{in}  = "$hb_binary_dir/$sbec_binary_filename";
+    $sections{SBEC}{out} = "$scratch_dir/$sbec_binary_filename";
+    $sections{PAYLOAD}{in}  = "$payload.bin";
+    $sections{PAYLOAD}{out} = "$scratch_dir/$payload_filename";
+
+    # Build up the system bin files specification
+    my $system_bin_files;
+    foreach my $section (keys %sections)
+    {
+        $_ = $sections{$section}{in};
+        if((/ecc/i) || (/pad/i))
+        {
+            die "Input file's name, $sections{$section}{in}, suggests padding "
+                . "or ECC, neither of which is allowed.";
+        }
+
+        # Stage the input file
+        run_command("cp $sections{$section}{in} "
+            . "$scratch_dir/$section.staged");
+
+        # If secureboot compile, there can be extra protected
+        # and unprotected versions of the input to stage
+        if(-e "$sections{$section}{in}.protected")
+        {
+            run_command("cp $sections{$section}{in}.protected "
+                . "$scratch_dir/$section.staged.protected");
+        }
+
+        if(-e "$sections{$section}{in}.unprotected")
+        {
+            run_command("cp $sections{$section}{in}.unprotected "
+                . "$scratch_dir/$section.staged.unprotected");
+        }
+
+        # Build up the systemBinFiles argument
+        my $separator = length($system_bin_files) ? "," : "";
+        $system_bin_files .= "$separator$section=$scratch_dir/"
+            . "$section.staged";
+    }
+
+    if(length($system_bin_files))
+    {
+        # Direct the tooling to use the open signing tools, if secureboot
+        # enabled
+        if($secureboot)
+        {
+            $ENV{'DEV_KEY_DIR'}="$ENV{'HOST_DIR'}/etc/keys/";
+            $ENV{'SIGNING_DIR'} = "$ENV{'HOST_DIR'}/usr/bin/";
+            $ENV{'SIGNING_TOOL_EDITION'} = "community";
+        }
+
+        # Determine whether to securely sign the images
+        my $securebootArg = $secureboot ? "--secureboot" : "";
+
+        # Process each image
+        my $cmd =   "cd $scratch_dir && "
+                  . "$hb_image_dir/genPnorImages.pl "
+                      . "--binDir $scratch_dir "
+                      . "--systemBinFiles $system_bin_files "
+                      . "--pnorLayout $pnor_layout "
+                      . "$securebootArg ";
+
+        # Print context not visible in the actual command
+        if($debug)
+        {
+            print STDOUT "SIGNING_DIR: " . $ENV{'SIGNING_DIR'} . "\n";
+            print STDOUT "DEV_KEY_DIR: " . $ENV{'DEV_KEY_DIR'} . "\n";
+            print STDOUT "SIGNING_TOOL_EDITION: "
+                . $ENV{'SIGNING_TOOL_EDITION'} . "\n";
+        }
+
+        run_command($cmd);
+
+        # Copy each output file to its final destination
+        foreach my $section (keys %sections)
+        {
+            run_command("cp $scratch_dir/$section.bin "
+                . "$sections{$section}{out}");
+        }
+    }
 }
 
-# Pad Targeting binary to 4k page size, then add ECC data
-###
-### To calculate the pad, ibs=(<partition size>/9)*8
-###
-run_command("dd if=$op_target_dir/$targeting_binary_source of=$scratch_dir/$targeting_binary_source ibs=4k conv=sync");
-run_command("ecc --inject $scratch_dir/$targeting_binary_source --output $scratch_dir/$targeting_binary_filename --p8");
-
-run_command("echo \"00000000001800000000000008000000000000000007EF80\" | xxd -r -ps - $scratch_dir/sbe.header");
-run_command("env echo -en VERSION\\\\0 > $scratch_dir/hostboot.sha.bin");
-run_command("sha512sum $hb_image_dir/img/hostboot.bin | awk \'{print \$1}\' | xxd -pr -r >> $scratch_dir/hostboot.sha.bin");
-run_command("dd if=$scratch_dir/hostboot.sha.bin of=$scratch_dir/secureboot.header ibs=4k conv=sync");
-run_command("dd if=/dev/zero of=$scratch_dir/hbb.footer count=1 bs=128K");
-run_command("cat $scratch_dir/sbe.header $scratch_dir/secureboot.header $hb_image_dir/img/hostboot.bin $scratch_dir/hbb.footer > $scratch_dir/hostboot.stage.bin");
-run_command("head -c 524288 $scratch_dir/hostboot.stage.bin > $scratch_dir/hostboot.header.bin");
-
-run_command("ecc --inject $hb_image_dir/img/hostboot.bin --output $scratch_dir/hostboot.bin.ecc --p8");
-run_command("ecc --inject $scratch_dir/hostboot.header.bin --output $scratch_dir/hostboot.header.bin.ecc --p8");
-run_command("dd if=$hb_image_dir/img/hostboot_extended.bin of=$scratch_dir/hostboot_extended.bin.pad ibs=4k count=1280 conv=sync");
-run_command("ecc --inject $scratch_dir/hostboot_extended.bin.pad --output $scratch_dir/hostboot_extended.bin.ecc --p8");
+processConvergedSections();
 
 run_command("env echo -en VERSION\\\\0 > $scratch_dir/hostboot_runtime.sha.bin");
 run_command("sha512sum $hb_image_dir/img/hostboot_runtime.bin | awk \'{print \$1}\' | xxd -pr -r >> $scratch_dir/hostboot_runtime.sha.bin");
@@ -124,13 +223,6 @@ run_command("cat $hb_image_dir/img/hostboot_runtime.bin >> $scratch_dir/hostboot
 run_command("dd if=$scratch_dir/hostboot.temp.bin of=$scratch_dir/hostboot_runtime.header.bin ibs=3072K conv=sync");
 run_command("ecc --inject $scratch_dir/hostboot_runtime.header.bin --output $scratch_dir/hostboot_runtime.header.bin.ecc --p8");
 
-run_command("env echo -en VERSION\\\\0 > $scratch_dir/hostboot_extended.sha.bin");
-run_command("sha512sum $hb_image_dir/img/hostboot_extended.bin | awk \'{print \$1}\' | xxd -pr -r >> $scratch_dir/hostboot_extended.sha.bin");
-run_command("dd if=$scratch_dir/hostboot_extended.sha.bin of=$scratch_dir/hostboot.temp.bin ibs=4k conv=sync");
-run_command("cat $hb_image_dir/img/hostboot_extended.bin >> $scratch_dir/hostboot.temp.bin");
-run_command("dd if=$scratch_dir/hostboot.temp.bin of=$scratch_dir/hostboot_extended.header.bin ibs=5120k conv=sync");
-run_command("ecc --inject $scratch_dir/hostboot_extended.header.bin --output $scratch_dir/hostboot_extended.header.bin.ecc --p8");
-
 #Create blank binary file for HB Errorlogs (HBEL) Partition
 run_command("dd if=/dev/zero bs=128K count=1 | tr \"\\000\" \"\\377\" > $scratch_dir/hostboot.temp.bin");
 run_command("ecc --inject $scratch_dir/hostboot.temp.bin --output $scratch_dir/hbel.bin.ecc --p8");\
@@ -183,8 +275,6 @@ run_command("dd if=$openpower_version_filename of=$scratch_dir/openpower_version
 run_command("cp $scratch_dir/openpower_version.temp $openpower_version_filename");
 
 #Copy Binary Data files for consistency
-run_command("cp $hb_binary_dir/$sbec_binary_filename $scratch_dir/");
-run_command("cp $hb_binary_dir/$sbe_binary_filename $scratch_dir/");
 run_command("cp $hb_binary_dir/$wink_binary_filename $scratch_dir/");
 
 #END MAIN
-- 
1.8.2.2

